//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/Pddl.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AIInGames.Planning.PDDL.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PddlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, VARIABLE=38, 
		NAME=39, WS=40, LINE_COMMENT=41;
	public const int
		RULE_pddlDoc = 0, RULE_domain = 1, RULE_requireDef = 2, RULE_typesDef = 3, 
		RULE_predicatesDef = 4, RULE_actionDef = 5, RULE_problem = 6, RULE_objectDecl = 7, 
		RULE_init = 8, RULE_initEl = 9, RULE_goal = 10, RULE_goalDesc = 11, RULE_effect = 12, 
		RULE_cEffect = 13, RULE_condEffect = 14, RULE_pEffect = 15, RULE_atomicFormulaSkeleton = 16, 
		RULE_atomicFormula = 17, RULE_literal = 18, RULE_term = 19, RULE_predicate = 20, 
		RULE_typedVariableList = 21, RULE_singleTypeVarList = 22, RULE_typedNameList = 23, 
		RULE_singleTypeNameList = 24, RULE_type = 25, RULE_primitiveType = 26, 
		RULE_variable = 27, RULE_name = 28, RULE_requireKey = 29;
	public static readonly string[] ruleNames = {
		"pddlDoc", "domain", "requireDef", "typesDef", "predicatesDef", "actionDef", 
		"problem", "objectDecl", "init", "initEl", "goal", "goalDesc", "effect", 
		"cEffect", "condEffect", "pEffect", "atomicFormulaSkeleton", "atomicFormula", 
		"literal", "term", "predicate", "typedVariableList", "singleTypeVarList", 
		"typedNameList", "singleTypeNameList", "type", "primitiveType", "variable", 
		"name", "requireKey"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "'define'", "'domain'", "')'", "':requirements'", "':types'", 
		"':predicates'", "':action'", "':parameters'", "':precondition'", "':effect'", 
		"'problem'", "':domain'", "':objects'", "':init'", "':goal'", "'and'", 
		"'or'", "'not'", "'imply'", "'exists'", "'forall'", "'when'", "'-'", "'either'", 
		"'at'", "'over'", "':strips'", "':typing'", "':negative-preconditions'", 
		"':disjunctive-preconditions'", "':equality'", "':existential-preconditions'", 
		"':universal-preconditions'", "':quantified-preconditions'", "':conditional-effects'", 
		"':adl'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "VARIABLE", "NAME", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pddl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PddlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PddlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PddlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PddlDocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DomainContext domain() {
			return GetRuleContext<DomainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProblemContext problem() {
			return GetRuleContext<ProblemContext>(0);
		}
		public PddlDocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pddlDoc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPddlDoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PddlDocContext pddlDoc() {
		PddlDocContext _localctx = new PddlDocContext(Context, State);
		EnterRule(_localctx, 0, RULE_pddlDoc);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				domain();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				problem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireDefContext requireDef() {
			return GetRuleContext<RequireDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesDefContext typesDef() {
			return GetRuleContext<TypesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicatesDefContext predicatesDef() {
			return GetRuleContext<PredicatesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionDefContext[] actionDef() {
			return GetRuleContexts<ActionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionDefContext actionDef(int i) {
			return GetRuleContext<ActionDefContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(Context, State);
		EnterRule(_localctx, 2, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__0);
			State = 65;
			Match(T__1);
			State = 66;
			Match(T__0);
			State = 67;
			Match(T__2);
			State = 68;
			name();
			State = 69;
			Match(T__3);
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 70;
				requireDef();
				}
				break;
			}
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 73;
				typesDef();
				}
				break;
			}
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 76;
				predicatesDef();
				}
				break;
			}
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 79;
				actionDef();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireKeyContext[] requireKey() {
			return GetRuleContexts<RequireKeyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireKeyContext requireKey(int i) {
			return GetRuleContext<RequireKeyContext>(i);
		}
		public RequireDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefContext requireDef() {
		RequireDefContext _localctx = new RequireDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_requireDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__0);
			State = 88;
			Match(T__4);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 89;
				requireKey();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 274609471488L) != 0) );
			State = 94;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedNameListContext typedNameList() {
			return GetRuleContext<TypedNameListContext>(0);
		}
		public TypesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesDefContext typesDef() {
		TypesDefContext _localctx = new TypesDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_typesDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(T__0);
			State = 97;
			Match(T__5);
			State = 98;
			typedNameList();
			State = 99;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicFormulaSkeletonContext[] atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public PredicatesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicatesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefContext predicatesDef() {
		PredicatesDefContext _localctx = new PredicatesDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_predicatesDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__0);
			State = 102;
			Match(T__6);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 103;
				atomicFormulaSkeleton();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			State = 108;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc() {
			return GetRuleContext<GoalDescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ActionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefContext actionDef() {
		ActionDefContext _localctx = new ActionDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_actionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(T__0);
			State = 111;
			Match(T__7);
			State = 112;
			name();
			State = 113;
			Match(T__8);
			State = 114;
			Match(T__0);
			State = 115;
			typedVariableList();
			State = 116;
			Match(T__3);
			State = 117;
			Match(T__9);
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 118;
				goalDesc();
				}
				break;
			case 2:
				{
				State = 119;
				Match(T__0);
				State = 120;
				Match(T__3);
				}
				break;
			}
			State = 123;
			Match(T__10);
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 124;
				effect();
				}
				break;
			case 2:
				{
				State = 125;
				Match(T__0);
				State = 126;
				Match(T__3);
				}
				break;
			}
			State = 129;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext goal() {
			return GetRuleContext<GoalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclContext objectDecl() {
			return GetRuleContext<ObjectDeclContext>(0);
		}
		public ProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemContext problem() {
		ProblemContext _localctx = new ProblemContext(Context, State);
		EnterRule(_localctx, 12, RULE_problem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__0);
			State = 132;
			Match(T__1);
			State = 133;
			Match(T__0);
			State = 134;
			Match(T__11);
			State = 135;
			name();
			State = 136;
			Match(T__3);
			State = 137;
			Match(T__0);
			State = 138;
			Match(T__12);
			State = 139;
			name();
			State = 140;
			Match(T__3);
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 141;
				objectDecl();
				}
				break;
			}
			State = 144;
			init();
			State = 145;
			goal();
			State = 146;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedNameListContext typedNameList() {
			return GetRuleContext<TypedNameListContext>(0);
		}
		public ObjectDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclContext objectDecl() {
		ObjectDeclContext _localctx = new ObjectDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_objectDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(T__0);
			State = 149;
			Match(T__13);
			State = 150;
			typedNameList();
			State = 151;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitElContext[] initEl() {
			return GetRuleContexts<InitElContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitElContext initEl(int i) {
			return GetRuleContext<InitElContext>(i);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 16, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__0);
			State = 154;
			Match(T__14);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 155;
				initEl();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 161;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitElContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public InitElContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initEl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitEl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitElContext initEl() {
		InitElContext _localctx = new InitElContext(Context, State);
		EnterRule(_localctx, 18, RULE_initEl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc() {
			return GetRuleContext<GoalDescContext>(0);
		}
		public GoalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalContext goal() {
		GoalContext _localctx = new GoalContext(Context, State);
		EnterRule(_localctx, 20, RULE_goal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(T__0);
			State = 166;
			Match(T__15);
			State = 167;
			goalDesc();
			State = 168;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalDescContext : ParserRuleContext {
		public GoalDescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goalDesc; } }
	 
		public GoalDescContext() { }
		public virtual void CopyFrom(GoalDescContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GoalOrContext : GoalDescContext {
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext[] goalDesc() {
			return GetRuleContexts<GoalDescContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc(int i) {
			return GetRuleContext<GoalDescContext>(i);
		}
		public GoalOrContext(GoalDescContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoalExistsContext : GoalDescContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc() {
			return GetRuleContext<GoalDescContext>(0);
		}
		public GoalExistsContext(GoalDescContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalExists(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoalAndContext : GoalDescContext {
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext[] goalDesc() {
			return GetRuleContexts<GoalDescContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc(int i) {
			return GetRuleContext<GoalDescContext>(i);
		}
		public GoalAndContext(GoalDescContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoalForallContext : GoalDescContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc() {
			return GetRuleContext<GoalDescContext>(0);
		}
		public GoalForallContext(GoalDescContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalForall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoalImplyContext : GoalDescContext {
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext[] goalDesc() {
			return GetRuleContexts<GoalDescContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc(int i) {
			return GetRuleContext<GoalDescContext>(i);
		}
		public GoalImplyContext(GoalDescContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalImply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoalNotContext : GoalDescContext {
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc() {
			return GetRuleContext<GoalDescContext>(0);
		}
		public GoalNotContext(GoalDescContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoalSimpleContext : GoalDescContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public GoalSimpleContext(GoalDescContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoalSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalDescContext goalDesc() {
		GoalDescContext _localctx = new GoalDescContext(Context, State);
		EnterRule(_localctx, 22, RULE_goalDesc);
		int _la;
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new GoalSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				atomicFormula();
				}
				break;
			case 2:
				_localctx = new GoalAndContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				Match(T__0);
				State = 172;
				Match(T__16);
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 173;
					goalDesc();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 179;
				Match(T__3);
				}
				break;
			case 3:
				_localctx = new GoalOrContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 180;
				Match(T__0);
				State = 181;
				Match(T__17);
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 182;
					goalDesc();
					}
					}
					State = 187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 188;
				Match(T__3);
				}
				break;
			case 4:
				_localctx = new GoalNotContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 189;
				Match(T__0);
				State = 190;
				Match(T__18);
				State = 191;
				goalDesc();
				State = 192;
				Match(T__3);
				}
				break;
			case 5:
				_localctx = new GoalImplyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 194;
				Match(T__0);
				State = 195;
				Match(T__19);
				State = 196;
				goalDesc();
				State = 197;
				goalDesc();
				State = 198;
				Match(T__3);
				}
				break;
			case 6:
				_localctx = new GoalExistsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 200;
				Match(T__0);
				State = 201;
				Match(T__20);
				State = 202;
				Match(T__0);
				State = 203;
				typedVariableList();
				State = 204;
				Match(T__3);
				State = 205;
				goalDesc();
				State = 206;
				Match(T__3);
				}
				break;
			case 7:
				_localctx = new GoalForallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 208;
				Match(T__0);
				State = 209;
				Match(T__21);
				State = 210;
				Match(T__0);
				State = 211;
				typedVariableList();
				State = 212;
				Match(T__3);
				State = 213;
				goalDesc();
				State = 214;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effect; } }
	 
		public EffectContext() { }
		public virtual void CopyFrom(EffectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EffectAndContext : EffectContext {
		[System.Diagnostics.DebuggerNonUserCode] public CEffectContext[] cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public EffectAndContext(EffectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EffectSimpleContext : EffectContext {
		[System.Diagnostics.DebuggerNonUserCode] public CEffectContext cEffect() {
			return GetRuleContext<CEffectContext>(0);
		}
		public EffectSimpleContext(EffectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(Context, State);
		EnterRule(_localctx, 24, RULE_effect);
		int _la;
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new EffectAndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				Match(T__0);
				State = 219;
				Match(T__16);
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 220;
					cEffect();
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 226;
				Match(T__3);
				}
				break;
			case 2:
				_localctx = new EffectSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cEffect; } }
	 
		public CEffectContext() { }
		public virtual void CopyFrom(CEffectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CEffectSimpleContext : CEffectContext {
		[System.Diagnostics.DebuggerNonUserCode] public PEffectContext pEffect() {
			return GetRuleContext<PEffectContext>(0);
		}
		public CEffectSimpleContext(CEffectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffectSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CEffectForallContext : CEffectContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public CEffectForallContext(CEffectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffectForall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CEffectWhenContext : CEffectContext {
		[System.Diagnostics.DebuggerNonUserCode] public GoalDescContext goalDesc() {
			return GetRuleContext<GoalDescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public CEffectWhenContext(CEffectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffectWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(Context, State);
		EnterRule(_localctx, 26, RULE_cEffect);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new CEffectForallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				Match(T__0);
				State = 231;
				Match(T__21);
				State = 232;
				Match(T__0);
				State = 233;
				typedVariableList();
				State = 234;
				Match(T__3);
				State = 235;
				effect();
				State = 236;
				Match(T__3);
				}
				break;
			case 2:
				_localctx = new CEffectWhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				Match(T__0);
				State = 239;
				Match(T__22);
				State = 240;
				goalDesc();
				State = 241;
				condEffect();
				State = 242;
				Match(T__3);
				}
				break;
			case 3:
				_localctx = new CEffectSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 244;
				pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PEffectContext[] pEffect() {
			return GetRuleContexts<PEffectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PEffectContext pEffect(int i) {
			return GetRuleContext<PEffectContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condEffect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(Context, State);
		EnterRule(_localctx, 28, RULE_condEffect);
		int _la;
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				Match(T__0);
				State = 248;
				Match(T__16);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 249;
					pEffect();
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 255;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PEffectContext : ParserRuleContext {
		public PEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pEffect; } }
	 
		public PEffectContext() { }
		public virtual void CopyFrom(PEffectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PEffectPosContext : PEffectContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public PEffectPosContext(PEffectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffectPos(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PEffectNotContext : PEffectContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public PEffectNotContext(PEffectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffectNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PEffectContext pEffect() {
		PEffectContext _localctx = new PEffectContext(Context, State);
		EnterRule(_localctx, 30, RULE_pEffect);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new PEffectNotContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				Match(T__0);
				State = 260;
				Match(T__18);
				State = 261;
				atomicFormula();
				State = 262;
				Match(T__3);
				}
				break;
			case 2:
				_localctx = new PEffectPosContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				atomicFormula();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVariableListContext typedVariableList() {
			return GetRuleContext<TypedVariableListContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicFormulaSkeleton; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(Context, State);
		EnterRule(_localctx, 32, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(T__0);
			State = 268;
			predicate();
			State = 269;
			typedVariableList();
			State = 270;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicFormula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaContext atomicFormula() {
		AtomicFormulaContext _localctx = new AtomicFormulaContext(Context, State);
		EnterRule(_localctx, 34, RULE_atomicFormula);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(T__0);
			State = 273;
			predicate();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 824835047424L) != 0)) {
				{
				{
				State = 274;
				term();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 280;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 36, RULE_literal);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				atomicFormula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283;
				Match(T__0);
				State = 284;
				Match(T__18);
				State = 285;
				atomicFormula();
				State = 286;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 38, RULE_term);
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
			case T__26:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				name();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 40, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleTypeVarListContext[] singleTypeVarList() {
			return GetRuleContexts<SingleTypeVarListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTypeVarListContext singleTypeVarList(int i) {
			return GetRuleContext<SingleTypeVarListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public TypedVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVariableListContext typedVariableList() {
		TypedVariableListContext _localctx = new TypedVariableListContext(Context, State);
		EnterRule(_localctx, 42, RULE_typedVariableList);
		int _la;
		try {
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VARIABLE) {
					{
					{
					State = 296;
					singleTypeVarList();
					}
					}
					State = 301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VARIABLE) {
					{
					{
					State = 302;
					variable();
					}
					}
					State = 307;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeVarListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public SingleTypeVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeVarList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTypeVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeVarListContext singleTypeVarList() {
		SingleTypeVarListContext _localctx = new SingleTypeVarListContext(Context, State);
		EnterRule(_localctx, 44, RULE_singleTypeVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 310;
				variable();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VARIABLE );
			State = 315;
			Match(T__23);
			State = 316;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleTypeNameListContext[] singleTypeNameList() {
			return GetRuleContexts<SingleTypeNameListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTypeNameListContext singleTypeNameList(int i) {
			return GetRuleContext<SingleTypeNameListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public TypedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedNameListContext typedNameList() {
		TypedNameListContext _localctx = new TypedNameListContext(Context, State);
		EnterRule(_localctx, 46, RULE_typedNameList);
		int _la;
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549957140480L) != 0)) {
					{
					{
					State = 318;
					singleTypeNameList();
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549957140480L) != 0)) {
					{
					{
					State = 324;
					name();
					}
					}
					State = 329;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public SingleTypeNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTypeNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeNameListContext singleTypeNameList() {
		SingleTypeNameListContext _localctx = new SingleTypeNameListContext(Context, State);
		EnterRule(_localctx, 48, RULE_singleTypeNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 332;
				name();
				}
				}
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 549957140480L) != 0) );
			State = 337;
			Match(T__23);
			State = 338;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext[] primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_type);
		int _la;
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				Match(T__0);
				State = 341;
				Match(T__24);
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 342;
					primitiveType();
					}
					}
					State = 345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 549957140480L) != 0) );
				State = 347;
				Match(T__3);
				}
				break;
			case T__25:
			case T__26:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349;
				primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_primitiveType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(PddlParser.VARIABLE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 54, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PddlParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 56, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 549957140480L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireKeyContext : ParserRuleContext {
		public RequireKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPddlVisitor<TResult> typedVisitor = visitor as IPddlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireKeyContext requireKey() {
		RequireKeyContext _localctx = new RequireKeyContext(Context, State);
		EnterRule(_localctx, 58, RULE_requireKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 274609471488L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,41,361,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,1,0,3,0,63,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,72,8,1,1,
		1,3,1,75,8,1,1,1,3,1,78,8,1,1,1,5,1,81,8,1,10,1,12,1,84,9,1,1,1,1,1,1,
		2,1,2,1,2,4,2,91,8,2,11,2,12,2,92,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
		1,4,4,4,105,8,4,11,4,12,4,106,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,3,5,122,8,5,1,5,1,5,1,5,1,5,3,5,128,8,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,143,8,6,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,5,8,157,8,8,10,8,12,8,160,9,8,1,8,1,8,1,9,1,9,
		1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,175,8,11,10,11,12,11,
		178,9,11,1,11,1,11,1,11,1,11,5,11,184,8,11,10,11,12,11,187,9,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,217,
		8,11,1,12,1,12,1,12,5,12,222,8,12,10,12,12,12,225,9,12,1,12,1,12,3,12,
		229,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,3,13,246,8,13,1,14,1,14,1,14,5,14,251,8,14,10,14,12,14,254,
		9,14,1,14,1,14,3,14,258,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,266,8,
		15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,5,17,276,8,17,10,17,12,17,279,
		9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,289,8,18,1,19,1,19,3,
		19,293,8,19,1,20,1,20,1,21,5,21,298,8,21,10,21,12,21,301,9,21,1,21,5,21,
		304,8,21,10,21,12,21,307,9,21,3,21,309,8,21,1,22,4,22,312,8,22,11,22,12,
		22,313,1,22,1,22,1,22,1,23,5,23,320,8,23,10,23,12,23,323,9,23,1,23,5,23,
		326,8,23,10,23,12,23,329,9,23,3,23,331,8,23,1,24,4,24,334,8,24,11,24,12,
		24,335,1,24,1,24,1,24,1,25,1,25,1,25,4,25,344,8,25,11,25,12,25,345,1,25,
		1,25,1,25,3,25,351,8,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,0,
		0,30,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,0,2,2,0,26,27,39,39,1,0,28,37,369,0,62,1,0,0,0,2,64,
		1,0,0,0,4,87,1,0,0,0,6,96,1,0,0,0,8,101,1,0,0,0,10,110,1,0,0,0,12,131,
		1,0,0,0,14,148,1,0,0,0,16,153,1,0,0,0,18,163,1,0,0,0,20,165,1,0,0,0,22,
		216,1,0,0,0,24,228,1,0,0,0,26,245,1,0,0,0,28,257,1,0,0,0,30,265,1,0,0,
		0,32,267,1,0,0,0,34,272,1,0,0,0,36,288,1,0,0,0,38,292,1,0,0,0,40,294,1,
		0,0,0,42,308,1,0,0,0,44,311,1,0,0,0,46,330,1,0,0,0,48,333,1,0,0,0,50,350,
		1,0,0,0,52,352,1,0,0,0,54,354,1,0,0,0,56,356,1,0,0,0,58,358,1,0,0,0,60,
		63,3,2,1,0,61,63,3,12,6,0,62,60,1,0,0,0,62,61,1,0,0,0,63,1,1,0,0,0,64,
		65,5,1,0,0,65,66,5,2,0,0,66,67,5,1,0,0,67,68,5,3,0,0,68,69,3,56,28,0,69,
		71,5,4,0,0,70,72,3,4,2,0,71,70,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,
		75,3,6,3,0,74,73,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,78,3,8,4,0,77,
		76,1,0,0,0,77,78,1,0,0,0,78,82,1,0,0,0,79,81,3,10,5,0,80,79,1,0,0,0,81,
		84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,
		86,5,4,0,0,86,3,1,0,0,0,87,88,5,1,0,0,88,90,5,5,0,0,89,91,3,58,29,0,90,
		89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,94,1,0,0,0,94,
		95,5,4,0,0,95,5,1,0,0,0,96,97,5,1,0,0,97,98,5,6,0,0,98,99,3,46,23,0,99,
		100,5,4,0,0,100,7,1,0,0,0,101,102,5,1,0,0,102,104,5,7,0,0,103,105,3,32,
		16,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,
		108,1,0,0,0,108,109,5,4,0,0,109,9,1,0,0,0,110,111,5,1,0,0,111,112,5,8,
		0,0,112,113,3,56,28,0,113,114,5,9,0,0,114,115,5,1,0,0,115,116,3,42,21,
		0,116,117,5,4,0,0,117,121,5,10,0,0,118,122,3,22,11,0,119,120,5,1,0,0,120,
		122,5,4,0,0,121,118,1,0,0,0,121,119,1,0,0,0,122,123,1,0,0,0,123,127,5,
		11,0,0,124,128,3,24,12,0,125,126,5,1,0,0,126,128,5,4,0,0,127,124,1,0,0,
		0,127,125,1,0,0,0,128,129,1,0,0,0,129,130,5,4,0,0,130,11,1,0,0,0,131,132,
		5,1,0,0,132,133,5,2,0,0,133,134,5,1,0,0,134,135,5,12,0,0,135,136,3,56,
		28,0,136,137,5,4,0,0,137,138,5,1,0,0,138,139,5,13,0,0,139,140,3,56,28,
		0,140,142,5,4,0,0,141,143,3,14,7,0,142,141,1,0,0,0,142,143,1,0,0,0,143,
		144,1,0,0,0,144,145,3,16,8,0,145,146,3,20,10,0,146,147,5,4,0,0,147,13,
		1,0,0,0,148,149,5,1,0,0,149,150,5,14,0,0,150,151,3,46,23,0,151,152,5,4,
		0,0,152,15,1,0,0,0,153,154,5,1,0,0,154,158,5,15,0,0,155,157,3,18,9,0,156,
		155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,
		0,0,0,160,158,1,0,0,0,161,162,5,4,0,0,162,17,1,0,0,0,163,164,3,36,18,0,
		164,19,1,0,0,0,165,166,5,1,0,0,166,167,5,16,0,0,167,168,3,22,11,0,168,
		169,5,4,0,0,169,21,1,0,0,0,170,217,3,34,17,0,171,172,5,1,0,0,172,176,5,
		17,0,0,173,175,3,22,11,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,
		0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,217,5,4,0,0,180,
		181,5,1,0,0,181,185,5,18,0,0,182,184,3,22,11,0,183,182,1,0,0,0,184,187,
		1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,
		0,188,217,5,4,0,0,189,190,5,1,0,0,190,191,5,19,0,0,191,192,3,22,11,0,192,
		193,5,4,0,0,193,217,1,0,0,0,194,195,5,1,0,0,195,196,5,20,0,0,196,197,3,
		22,11,0,197,198,3,22,11,0,198,199,5,4,0,0,199,217,1,0,0,0,200,201,5,1,
		0,0,201,202,5,21,0,0,202,203,5,1,0,0,203,204,3,42,21,0,204,205,5,4,0,0,
		205,206,3,22,11,0,206,207,5,4,0,0,207,217,1,0,0,0,208,209,5,1,0,0,209,
		210,5,22,0,0,210,211,5,1,0,0,211,212,3,42,21,0,212,213,5,4,0,0,213,214,
		3,22,11,0,214,215,5,4,0,0,215,217,1,0,0,0,216,170,1,0,0,0,216,171,1,0,
		0,0,216,180,1,0,0,0,216,189,1,0,0,0,216,194,1,0,0,0,216,200,1,0,0,0,216,
		208,1,0,0,0,217,23,1,0,0,0,218,219,5,1,0,0,219,223,5,17,0,0,220,222,3,
		26,13,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,
		0,224,226,1,0,0,0,225,223,1,0,0,0,226,229,5,4,0,0,227,229,3,26,13,0,228,
		218,1,0,0,0,228,227,1,0,0,0,229,25,1,0,0,0,230,231,5,1,0,0,231,232,5,22,
		0,0,232,233,5,1,0,0,233,234,3,42,21,0,234,235,5,4,0,0,235,236,3,24,12,
		0,236,237,5,4,0,0,237,246,1,0,0,0,238,239,5,1,0,0,239,240,5,23,0,0,240,
		241,3,22,11,0,241,242,3,28,14,0,242,243,5,4,0,0,243,246,1,0,0,0,244,246,
		3,30,15,0,245,230,1,0,0,0,245,238,1,0,0,0,245,244,1,0,0,0,246,27,1,0,0,
		0,247,248,5,1,0,0,248,252,5,17,0,0,249,251,3,30,15,0,250,249,1,0,0,0,251,
		254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,252,1,
		0,0,0,255,258,5,4,0,0,256,258,3,30,15,0,257,247,1,0,0,0,257,256,1,0,0,
		0,258,29,1,0,0,0,259,260,5,1,0,0,260,261,5,19,0,0,261,262,3,34,17,0,262,
		263,5,4,0,0,263,266,1,0,0,0,264,266,3,34,17,0,265,259,1,0,0,0,265,264,
		1,0,0,0,266,31,1,0,0,0,267,268,5,1,0,0,268,269,3,40,20,0,269,270,3,42,
		21,0,270,271,5,4,0,0,271,33,1,0,0,0,272,273,5,1,0,0,273,277,3,40,20,0,
		274,276,3,38,19,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,
		278,1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,5,4,0,0,281,35,1,0,
		0,0,282,289,3,34,17,0,283,284,5,1,0,0,284,285,5,19,0,0,285,286,3,34,17,
		0,286,287,5,4,0,0,287,289,1,0,0,0,288,282,1,0,0,0,288,283,1,0,0,0,289,
		37,1,0,0,0,290,293,3,56,28,0,291,293,3,54,27,0,292,290,1,0,0,0,292,291,
		1,0,0,0,293,39,1,0,0,0,294,295,3,56,28,0,295,41,1,0,0,0,296,298,3,44,22,
		0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,
		309,1,0,0,0,301,299,1,0,0,0,302,304,3,54,27,0,303,302,1,0,0,0,304,307,
		1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,
		0,308,299,1,0,0,0,308,305,1,0,0,0,309,43,1,0,0,0,310,312,3,54,27,0,311,
		310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,315,1,
		0,0,0,315,316,5,24,0,0,316,317,3,50,25,0,317,45,1,0,0,0,318,320,3,48,24,
		0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
		331,1,0,0,0,323,321,1,0,0,0,324,326,3,56,28,0,325,324,1,0,0,0,326,329,
		1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,
		0,330,321,1,0,0,0,330,327,1,0,0,0,331,47,1,0,0,0,332,334,3,56,28,0,333,
		332,1,0,0,0,334,335,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,337,1,
		0,0,0,337,338,5,24,0,0,338,339,3,50,25,0,339,49,1,0,0,0,340,341,5,1,0,
		0,341,343,5,25,0,0,342,344,3,52,26,0,343,342,1,0,0,0,344,345,1,0,0,0,345,
		343,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,5,4,0,0,348,351,1,
		0,0,0,349,351,3,52,26,0,350,340,1,0,0,0,350,349,1,0,0,0,351,51,1,0,0,0,
		352,353,3,56,28,0,353,53,1,0,0,0,354,355,5,38,0,0,355,55,1,0,0,0,356,357,
		7,0,0,0,357,57,1,0,0,0,358,359,7,1,0,0,359,59,1,0,0,0,33,62,71,74,77,82,
		92,106,121,127,142,158,176,185,216,223,228,245,252,257,265,277,288,292,
		299,305,308,313,321,327,330,335,345,350
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AIInGames.Planning.PDDL.Generated
